
#version 450


layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0, rgba8) uniform image2D inputImage;
layout (set = 1, binding = 0, rgba8) uniform image2D resultImage;



vec3 getScatteringValues(vec3 worldPosition)
{
    //  rayleigh + mie + ozone
    
    return vec3(0); 
}

vec3 integrateTransmittance(vec3 worldPosition, vec3 worldDirection)
{
    
    //integrationLength :  wordpos + t* wordldir --> atmosphere.top 
    //step

    //for( step)

        //pos
        //getScatteringValues(pos);

        // += scatteringvalue
	return vec3(0);
}



vec2 UvToLutTransmittanceParams(vec2 atmosphereBoundaries, vec2 uv)   //https://github.com/sebh/UnrealEngineSkyAtmosphere
{
	float x_mu = uv.x;
	float x_r = uv.y;

	float H = sqrt(atmosphereBoundaries.y * atmosphereBoundaries.y - atmosphereBoundaries.x * atmosphereBoundaries.x);
	float rho = H * x_r;
	float r = sqrt(rho * rho + atmosphereBoundaries.x * atmosphereBoundaries.x);

	float d_min = atmosphereBoundaries.y - r;  
	float d_max = rho + H;                      
	float d = d_min + x_mu * (d_max - d_min);
	float mu = d == 0.0 ? 1.0f : (H * H - rho * rho - d * d) / (2.0 * r * d);   //d= 0, ha v=1 u=0
	mu = clamp(mu, -1.0, 1.0);

    return vec2(r,mu);
}



void main()
{	
	    vec2 atmosphereBoundaries = vec2(
            6360.0f,
            6460.0f);

        vec2 texDim = vec2(256.0f, 64.0f);
        vec2 uv = gl_GlobalInvocationID.xy / texDim;

        vec2 params = UvToLutTransmittanceParams(atmosphereBoundaries, uv);
        float viewHeight = params.x;
        float viewZenithCosAngle = params.y;
    

        vec3 worldPosition = vec3(0.0,0.0, viewHeight );
        vec3 worldDirection = vec3(0.0, sqrt(max(0, 1.0 - viewZenithCosAngle * viewZenithCosAngle)), viewZenithCosAngle); 
       
	    //vec3 transmittance = exp(-integrateTransmittance(worldPosition, worldDirection));


        vec3 rgb = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x , gl_GlobalInvocationID.y)).rgb;
		

        imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4( rgb, 1.0));

}
